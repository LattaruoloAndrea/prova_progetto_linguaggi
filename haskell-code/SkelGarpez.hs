module SkelGarpez where

-- Haskell module generated by the BNF converter

import AbsGarpez
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transPBool :: PBool -> Result
transPBool x = case x of
  PBool string -> failure x
transPChar :: PChar -> Result
transPChar x = case x of
  PChar string -> failure x
transPInt :: PInt -> Result
transPInt x = case x of
  PInt string -> failure x
transPFloat :: PFloat -> Result
transPFloat x = case x of
  PFloat string -> failure x
transPString :: PString -> Result
transPString x = case x of
  PString string -> failure x
transReturn :: Return -> Result
transReturn x = case x of
  Return string -> failure x
transBreak :: Break -> Result
transBreak x = case x of
  Break string -> failure x
transContinue :: Continue -> Result
transContinue x = case x of
  Continue string -> failure x
transRChar :: RChar -> Result
transRChar x = case x of
  RChar string -> failure x
transRInt :: RInt -> Result
transRInt x = case x of
  RInt string -> failure x
transRFloat :: RFloat -> Result
transRFloat x = case x of
  RFloat string -> failure x
transRString :: RString -> Result
transRString x = case x of
  RString string -> failure x
transWChar :: WChar -> Result
transWChar x = case x of
  WChar string -> failure x
transWInt :: WInt -> Result
transWInt x = case x of
  WInt string -> failure x
transWFloat :: WFloat -> Result
transWFloat x = case x of
  WFloat string -> failure x
transWString :: WString -> Result
transWString x = case x of
  WString string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog globals -> failure x
transGlobal :: Global -> Result
transGlobal x = case x of
  GlobalDecl declaration -> failure x
  FunDecl function -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  ConstDecl inititems -> failure x
  VarDecl type_ declitems -> failure x
transInitItem :: InitItem -> Result
transInitItem x = case x of
  InitDecl id rexp -> failure x
transDeclId :: DeclId -> Result
transDeclId x = case x of
  DeclOnly id -> failure x
transDeclItem :: DeclItem -> Result
transDeclItem x = case x of
  DeclItemDeclId declid -> failure x
  DeclItemInitItem inititem -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  Fun rettype funrest -> failure x
transFunRest :: FunRest -> Result
transFunRest x = case x of
  FRest id formalparams block -> failure x
transFormalParam :: FormalParam -> Result
transFormalParam x = case x of
  Param passby type_ id -> failure x
transPassBy :: PassBy -> Result
transPassBy x = case x of
  ValuePass -> failure x
  RefPass -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Blk declarations statements -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  BlkStm block -> failure x
  CallStm id rexps -> failure x
  AssignStm lexp assignmentop rexp -> failure x
  LExpStm lexp -> failure x
  CondStm conditional -> failure x
  LoopStm loop -> failure x
  JmpStm jump -> failure x
  WriteStm wpredefined rexp -> failure x
transConditional :: Conditional -> Result
transConditional x = case x of
  ConditionalIf if_ -> failure x
transLoop :: Loop -> Result
transLoop x = case x of
  LoopWhile while -> failure x
  LoopDoWhile dowhile -> failure x
  LoopFor for -> failure x
transJump :: Jump -> Result
transJump x = case x of
  JumpReturn return -> failure x
  Jump1 return rexp -> failure x
  JumpBreak break -> failure x
  JumpContinue continue -> failure x
transWPredefined :: WPredefined -> Result
transWPredefined x = case x of
  WPredefinedWChar wchar -> failure x
  WPredefinedWInt wint -> failure x
  WPredefinedWFloat wfloat -> failure x
  WPredefinedWString wstring -> failure x
transIf :: If -> Result
transIf x = case x of
  IfCond rexp block restif -> failure x
transRestIf :: RestIf -> Result
transRestIf x = case x of
  RestIf_ -> failure x
  RestIf1 if_ -> failure x
  RestIf2 block -> failure x
transWhile :: While -> Result
transWhile x = case x of
  WhileLoop rexp block -> failure x
transDoWhile :: DoWhile -> Result
transDoWhile x = case x of
  DoWhileLoop block rexp -> failure x
transFor :: For -> Result
transFor x = case x of
  ForLoop declaration rexp1 rexp2 block -> failure x
transLExp :: LExp -> Result
transLExp x = case x of
  Dereference lexp -> failure x
  Post lexp incdecop -> failure x
  Pre incdecop lexp -> failure x
  ArrayAccess lexp rexp -> failure x
  IdExp id -> failure x
transRExp :: RExp -> Result
transRExp x = case x of
  LogicalOr rexp1 rexp2 -> failure x
  LogicalAnd rexp1 rexp2 -> failure x
  LogicalXor rexp1 rexp2 -> failure x
  LogicalNot rexp -> failure x
  Comparison rexp1 comparisonop rexp2 -> failure x
  Sum rexp1 rexp2 -> failure x
  Sub rexp1 rexp2 -> failure x
  Mul rexp1 rexp2 -> failure x
  Div rexp1 rexp2 -> failure x
  Mod rexp1 rexp2 -> failure x
  Sign signop rexp -> failure x
  Reference lexp -> failure x
  LRExp lexp -> failure x
  CallExp id rexps -> failure x
  ReadExp rpredefined -> failure x
  Lit literal -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  LiteralPBool pbool -> failure x
  LiteralPChar pchar -> failure x
  LiteralPInt pint -> failure x
  LiteralPFloat pfloat -> failure x
  LiteralPString pstring -> failure x
transRPredefined :: RPredefined -> Result
transRPredefined x = case x of
  RPredefinedRChar rchar -> failure x
  RPredefinedRInt rint -> failure x
  RPredefinedRFloat rfloat -> failure x
  RPredefinedRString rstring -> failure x
transType :: Type -> Result
transType x = case x of
  SType simpletype -> failure x
  AType type_ pint -> failure x
  PType type_ -> failure x
transRetType :: RetType -> Result
transRetType x = case x of
  SRType simpletype -> failure x
  RRType type_ -> failure x
transSimpleType :: SimpleType -> Result
transSimpleType x = case x of
  SimpleType_bool -> failure x
  SimpleType_char -> failure x
  SimpleType_int -> failure x
  SimpleType_float -> failure x
  SimpleType_string -> failure x
  SimpleType_void -> failure x
transAssignmentOp :: AssignmentOp -> Result
transAssignmentOp x = case x of
  AssignmentOp1 -> failure x
  AssignmentOp2 -> failure x
  AssignmentOp3 -> failure x
  AssignmentOp4 -> failure x
  AssignmentOp5 -> failure x
  AssignmentOp6 -> failure x
  AssignmentOp7 -> failure x
  AssignmentOp8 -> failure x
  AssignmentOp9 -> failure x
transComparisonOp :: ComparisonOp -> Result
transComparisonOp x = case x of
  ComparisonOp1 -> failure x
  ComparisonOp2 -> failure x
  ComparisonOp3 -> failure x
  ComparisonOp4 -> failure x
  ComparisonOp5 -> failure x
  ComparisonOp6 -> failure x
transIncDecOp :: IncDecOp -> Result
transIncDecOp x = case x of
  IncDecOp1 -> failure x
  IncDecOp2 -> failure x
transSignOp :: SignOp -> Result
transSignOp x = case x of
  SignOp1 -> failure x
  SignOp2 -> failure x


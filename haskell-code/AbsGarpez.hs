-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGarpez where

newtype Id = Id ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PBool = PBool ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PChar = PChar ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PInt = PInt ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PFloat = PFloat ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PString = PString ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype Return = Return ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype Break = Break ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype Continue = Continue ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype RChar = RChar ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype RInt = RInt ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype RFloat = RFloat ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype RString = RString ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype WChar = WChar ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype WInt = WInt ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype WFloat = WFloat ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype WString = WString ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

data Program = Prog [Global]
  deriving (Eq, Ord, Show, Read)

data Global = GlobalDecl Declaration | FunDecl Function
  deriving (Eq, Ord, Show, Read)

data Declaration = ConstDecl [InitItem] | VarDecl Type [DeclItem]
  deriving (Eq, Ord, Show, Read)

data InitItem = InitDecl Id RExp
  deriving (Eq, Ord, Show, Read)

data DeclId = DeclOnly Id
  deriving (Eq, Ord, Show, Read)

data DeclItem = DeclItemDeclId DeclId | DeclItemInitItem InitItem
  deriving (Eq, Ord, Show, Read)

data Function = Fun RetType FunRest
  deriving (Eq, Ord, Show, Read)

data FunRest = FRest Id [FormalParam] Block
  deriving (Eq, Ord, Show, Read)

data FormalParam = Param PassBy Type Id
  deriving (Eq, Ord, Show, Read)

data PassBy = ValuePass | RefPass
  deriving (Eq, Ord, Show, Read)

data Block = Blk [Declaration] [Statement]
  deriving (Eq, Ord, Show, Read)

data Statement
    = BlkStm Block
    | CallStm Id [RExp]
    | AssignStm LExp AssignmentOp RExp
    | LExpStm LExp
    | CondStm Conditional
    | LoopStm Loop
    | JmpStm Jump
    | WriteStm WPredefined RExp
  deriving (Eq, Ord, Show, Read)

data Conditional = ConditionalIf If
  deriving (Eq, Ord, Show, Read)

data Loop = LoopWhile While | LoopDoWhile DoWhile | LoopFor For
  deriving (Eq, Ord, Show, Read)

data Jump
    = JumpReturn Return
    | Jump1 Return RExp
    | JumpBreak Break
    | JumpContinue Continue
  deriving (Eq, Ord, Show, Read)

data WPredefined
    = WPredefinedWChar WChar
    | WPredefinedWInt WInt
    | WPredefinedWFloat WFloat
    | WPredefinedWString WString
  deriving (Eq, Ord, Show, Read)

data If = IfCond RExp Block RestIf
  deriving (Eq, Ord, Show, Read)

data RestIf = RestIf_ | RestIf1 If | RestIf2 Block
  deriving (Eq, Ord, Show, Read)

data While = WhileLoop RExp Block
  deriving (Eq, Ord, Show, Read)

data DoWhile = DoWhileLoop Block RExp
  deriving (Eq, Ord, Show, Read)

data For = ForLoop Declaration RExp RExp Block
  deriving (Eq, Ord, Show, Read)

data LExp
    = Dereference LExp
    | Post LExp IncDecOp
    | Pre IncDecOp LExp
    | ArrayAccess LExp RExp
    | IdExp Id
  deriving (Eq, Ord, Show, Read)

data RExp
    = LogicalOr RExp RExp
    | LogicalAnd RExp RExp
    | LogicalNot RExp
    | Comparison RExp ComparisonOp RExp
    | Sum RExp RExp
    | Sub RExp RExp
    | Mul RExp RExp
    | Div RExp RExp
    | Mod RExp RExp
    | Pow RExp RExp
    | Sign SignOp RExp
    | Reference LExp
    | LRExp LExp
    | CallExp Id [RExp]
    | ReadExp RPredefined
    | Lit Literal
  deriving (Eq, Ord, Show, Read)

data Literal
    = LiteralPBool PBool
    | LiteralPChar PChar
    | LiteralPInt PInt
    | LiteralPFloat PFloat
    | LiteralPString PString
  deriving (Eq, Ord, Show, Read)

data RPredefined
    = RPredefinedRChar RChar
    | RPredefinedRInt RInt
    | RPredefinedRFloat RFloat
    | RPredefinedRString RString
  deriving (Eq, Ord, Show, Read)

data Type = SType SimpleType | AType Type PInt | PType Type
  deriving (Eq, Ord, Show, Read)

data RetType = SRType SimpleType | RRType Type
  deriving (Eq, Ord, Show, Read)

data SimpleType
    = SimpleType_bool
    | SimpleType_char
    | SimpleType_int
    | SimpleType_float
    | SimpleType_string
    | SimpleType_void
  deriving (Eq, Ord, Show, Read)

data AssignmentOp
    = AssignmentOp1
    | AssignmentOp2
    | AssignmentOp3
    | AssignmentOp4
    | AssignmentOp5
    | AssignmentOp6
    | AssignmentOp7
    | AssignmentOp8
    | AssignmentOp9
  deriving (Eq, Ord, Show, Read)

data ComparisonOp
    = ComparisonOp1
    | ComparisonOp2
    | ComparisonOp3
    | ComparisonOp4
    | ComparisonOp5
    | ComparisonOp6
  deriving (Eq, Ord, Show, Read)

data IncDecOp = IncDecOp1 | IncDecOp2
  deriving (Eq, Ord, Show, Read)

data SignOp = SignOp1 | SignOp2
  deriving (Eq, Ord, Show, Read)


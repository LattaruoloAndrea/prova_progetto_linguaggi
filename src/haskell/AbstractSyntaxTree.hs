-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbstractSyntaxTree where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Prog [FDecl]
  deriving (Eq, Ord, Show, Read)

data FDecl = FDecl RType Ident [Param] Block
  deriving (Eq, Ord, Show, Read)

data Param = Param Type PassBy Ident
  deriving (Eq, Ord, Show, Read)

data PassBy = PassVal | PassRef
  deriving (Eq, Ord, Show, Read)

data DList = VList Type [VDecl] | CList [CDecl]
  deriving (Eq, Ord, Show, Read)

data VDecl = VSolo Ident | VInit Ident RExp
  deriving (Eq, Ord, Show, Read)

data CDecl = CDecl Ident RExp
  deriving (Eq, Ord, Show, Read)

data Type = Type Basic Compound
  deriving (Eq, Ord, Show, Read)

data Compound = Simple | Array Compound RExp | Pointer Compound
  deriving (Eq, Ord, Show, Read)

data Basic = BBool | BChar | BInt | BFloat | BString
  deriving (Eq, Ord, Show, Read)

data RType = RVoid | RBasic Basic | RRef Type
  deriving (Eq, Ord, Show, Read)

data Block = Block [DList] [Stm]
  deriving (Eq, Ord, Show, Read)

data Stm
    = StmBlock Block
    | StmCall Ident [RExp]
    | PredW PWrite RExp
    | Assign LExp AssignOp RExp
    | StmL LExp
    | If RExp Stm
    | IfElse RExp Stm Stm
    | While RExp Stm
    | DoWhile Stm RExp
    | For Ident RExp Dir RExp Stm
    | JmpStm Jump
  deriving (Eq, Ord, Show, Read)

data Dir = UpTo | DownTo
  deriving (Eq, Ord, Show, Read)

data Jump = Return | ReturnE RExp | Break | Continue
  deriving (Eq, Ord, Show, Read)

data LExp
    = Deref LExp
    | Post LExp IncDecOp
    | Pre IncDecOp LExp
    | Access LExp RExp
    | Name Ident
  deriving (Eq, Ord, Show, Read)

data RExp
    = Or RExp RExp
    | And RExp RExp
    | Not RExp
    | Comp RExp CompOp RExp
    | Add RExp RExp
    | Sub RExp RExp
    | Mul RExp RExp
    | Div RExp RExp
    | Rem RExp RExp
    | Pow RExp RExp
    | Sign SignOp RExp
    | Ref LExp
    | RLExp LExp
    | ArrList [RExp]
    | FCall Ident [RExp]
    | PredR PRead
    | Lit Literal
  deriving (Eq, Ord, Show, Read)

data PRead = ReadChar | ReadInt | ReadFloat | ReadString
  deriving (Eq, Ord, Show, Read)

data PWrite = WriteChar | WriteInt | WriteFloat | WriteString
  deriving (Eq, Ord, Show, Read)

data AssignOp
    = AssignEq
    | AssignAdd
    | AssignSub
    | AssignMul
    | AssignDiv
    | AssignMod
  deriving (Eq, Ord, Show, Read)

data CompOp = Lt | Leq | Eq | Neq | Geq | Gt
  deriving (Eq, Ord, Show, Read)

data IncDecOp = Inc | Dec
  deriving (Eq, Ord, Show, Read)

data SignOp = Pos | Neg
  deriving (Eq, Ord, Show, Read)

data Literal
    = LBool Boolean
    | LChar Char
    | LInt Integer
    | LFloat Double
    | LString String
  deriving (Eq, Ord, Show, Read)

data Boolean = BFalse | BTrue
  deriving (Eq, Ord, Show, Read)


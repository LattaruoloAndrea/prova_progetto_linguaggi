{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGarpezpp.
--   Generated by the BNF converter.

module PrintGarpezpp where

import qualified AbstractSyntaxTree as AST
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AST.Ident where
  prt _ (AST.Ident i) = doc (showString i)

instance Print AST.Program where
  prt i e = case e of
    AST.Prog fdecls -> prPrec i 0 (concatD [prt 0 fdecls])

instance Print AST.FDecl where
  prt i e = case e of
    AST.FDecl rtype id params block -> prPrec i 0 (concatD [prt 0 rtype, prt 0 id, doc (showString "("), prt 0 params, doc (showString ")"), prt 0 block])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AST.Param where
  prt i e = case e of
    AST.Param type_ passby id -> prPrec i 0 (concatD [prt 0 type_, prt 0 passby, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AST.PassBy where
  prt i e = case e of
    AST.PassVal -> prPrec i 0 (concatD [doc (showString "val")])
    AST.PassRef -> prPrec i 0 (concatD [doc (showString "ref")])

instance Print AST.DList where
  prt i e = case e of
    AST.VList type_ vdecls -> prPrec i 0 (concatD [prt 0 type_, prt 0 vdecls, doc (showString ";")])
    AST.CList cdecls -> prPrec i 0 (concatD [doc (showString "const"), prt 0 cdecls, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AST.VDecl where
  prt i e = case e of
    AST.VSolo id -> prPrec i 0 (concatD [prt 0 id])
    AST.VInit id rexp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 rexp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AST.CDecl where
  prt i e = case e of
    AST.CDecl id rexp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 rexp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AST.Type where
  prt i e = case e of
    AST.Type basic compound -> prPrec i 0 (concatD [prt 0 basic, prt 0 compound])

instance Print AST.Compound where
  prt i e = case e of
    AST.Simple -> prPrec i 0 (concatD [])
    AST.Array compound rexp -> prPrec i 0 (concatD [prt 0 compound, doc (showString "["), prt 0 rexp, doc (showString "]")])
    AST.Pointer compound -> prPrec i 0 (concatD [prt 0 compound, doc (showString "*")])

instance Print AST.Basic where
  prt i e = case e of
    AST.BBool -> prPrec i 0 (concatD [doc (showString "bool")])
    AST.BChar -> prPrec i 0 (concatD [doc (showString "char")])
    AST.BInt -> prPrec i 0 (concatD [doc (showString "int")])
    AST.BFloat -> prPrec i 0 (concatD [doc (showString "float")])
    AST.BString -> prPrec i 0 (concatD [doc (showString "string")])

instance Print AST.RType where
  prt i e = case e of
    AST.RVoid -> prPrec i 0 (concatD [doc (showString "void")])
    AST.RBasic basic -> prPrec i 0 (concatD [prt 0 basic])
    AST.RRef type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&")])

instance Print AST.Block where
  prt i e = case e of
    AST.Block dlists stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 dlists, prt 0 stms, doc (showString "}")])

instance Print AST.Stm where
  prt i e = case e of
    AST.StmBlock block -> prPrec i 0 (concatD [prt 0 block])
    AST.StmCall id rexps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexps, doc (showString ")"), doc (showString ";")])
    AST.PredW pwrite rexp -> prPrec i 0 (concatD [prt 0 pwrite, doc (showString "("), prt 0 rexp, doc (showString ")"), doc (showString ";")])
    AST.Assign lexp assignop rexp -> prPrec i 0 (concatD [prt 0 lexp, prt 0 assignop, prt 0 rexp, doc (showString ";")])
    AST.StmL lexp -> prPrec i 0 (concatD [prt 0 lexp, doc (showString ";")])
    AST.If rexp stm -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexp, doc (showString ")"), prt 0 stm])
    AST.IfElse rexp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexp, doc (showString ")"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    AST.While rexp stm -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 rexp, doc (showString ")"), prt 0 stm])
    AST.DoWhile stm rexp -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stm, doc (showString "while"), doc (showString "("), prt 0 rexp, doc (showString ")"), doc (showString ";")])
    AST.For id rexp1 dir rexp2 stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 id, doc (showString "="), prt 0 rexp1, prt 0 dir, prt 0 rexp2, doc (showString ")"), prt 0 stm])
    AST.JmpStm jump -> prPrec i 0 (concatD [prt 0 jump, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AST.Dir where
  prt i e = case e of
    AST.UpTo -> prPrec i 0 (concatD [doc (showString "upto")])
    AST.DownTo -> prPrec i 0 (concatD [doc (showString "downto")])

instance Print AST.Jump where
  prt i e = case e of
    AST.Return -> prPrec i 0 (concatD [doc (showString "return")])
    AST.ReturnE rexp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 rexp])
    AST.Break -> prPrec i 0 (concatD [doc (showString "break")])
    AST.Continue -> prPrec i 0 (concatD [doc (showString "continue")])

instance Print AST.LExp where
  prt i e = case e of
    AST.Deref lexp -> prPrec i 0 (concatD [doc (showString "*"), prt 0 lexp])
    AST.Post lexp incdecop -> prPrec i 1 (concatD [prt 2 lexp, prt 0 incdecop])
    AST.Pre incdecop lexp -> prPrec i 2 (concatD [prt 0 incdecop, prt 3 lexp])
    AST.Access lexp rexp -> prPrec i 3 (concatD [prt 3 lexp, doc (showString "["), prt 0 rexp, doc (showString "]")])
    AST.Name id -> prPrec i 4 (concatD [prt 0 id])

instance Print AST.RExp where
  prt i e = case e of
    AST.Or rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "||"), prt 1 rexp2])
    AST.And rexp1 rexp2 -> prPrec i 1 (concatD [prt 1 rexp1, doc (showString "&&"), prt 2 rexp2])
    AST.Not rexp -> prPrec i 2 (concatD [doc (showString "!"), prt 3 rexp])
    AST.Comp rexp1 compop rexp2 -> prPrec i 3 (concatD [prt 3 rexp1, prt 0 compop, prt 4 rexp2])
    AST.Add rexp1 rexp2 -> prPrec i 4 (concatD [prt 4 rexp1, doc (showString "+"), prt 5 rexp2])
    AST.Sub rexp1 rexp2 -> prPrec i 4 (concatD [prt 4 rexp1, doc (showString "-"), prt 5 rexp2])
    AST.Mul rexp1 rexp2 -> prPrec i 5 (concatD [prt 5 rexp1, doc (showString "*"), prt 6 rexp2])
    AST.Div rexp1 rexp2 -> prPrec i 5 (concatD [prt 5 rexp1, doc (showString "/"), prt 6 rexp2])
    AST.Rem rexp1 rexp2 -> prPrec i 5 (concatD [prt 5 rexp1, doc (showString "%"), prt 6 rexp2])
    AST.Pow rexp1 rexp2 -> prPrec i 6 (concatD [prt 7 rexp1, doc (showString "^"), prt 6 rexp2])
    AST.Sign signop rexp -> prPrec i 7 (concatD [prt 0 signop, prt 8 rexp])
    AST.Ref lexp -> prPrec i 7 (concatD [doc (showString "&"), prt 0 lexp])
    AST.RLExp lexp -> prPrec i 8 (concatD [prt 0 lexp])
    AST.ArrList rexps -> prPrec i 9 (concatD [doc (showString "["), prt 0 rexps, doc (showString "]")])
    AST.FCall id rexps -> prPrec i 9 (concatD [prt 0 id, doc (showString "("), prt 0 rexps, doc (showString ")")])
    AST.PredR pread -> prPrec i 9 (concatD [prt 0 pread, doc (showString "("), doc (showString ")")])
    AST.Lit literal -> prPrec i 10 (concatD [prt 0 literal])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AST.PRead where
  prt i e = case e of
    AST.ReadChar -> prPrec i 0 (concatD [doc (showString "readChar")])
    AST.ReadInt -> prPrec i 0 (concatD [doc (showString "readInt")])
    AST.ReadFloat -> prPrec i 0 (concatD [doc (showString "readFloat")])
    AST.ReadString -> prPrec i 0 (concatD [doc (showString "readString")])

instance Print AST.PWrite where
  prt i e = case e of
    AST.WriteChar -> prPrec i 0 (concatD [doc (showString "writeChar")])
    AST.WriteInt -> prPrec i 0 (concatD [doc (showString "writeInt")])
    AST.WriteFloat -> prPrec i 0 (concatD [doc (showString "writeFloat")])
    AST.WriteString -> prPrec i 0 (concatD [doc (showString "writeString")])

instance Print AST.AssignOp where
  prt i e = case e of
    AST.AssignEq -> prPrec i 0 (concatD [doc (showString "=")])
    AST.AssignAdd -> prPrec i 0 (concatD [doc (showString "+=")])
    AST.AssignSub -> prPrec i 0 (concatD [doc (showString "-=")])
    AST.AssignMul -> prPrec i 0 (concatD [doc (showString "*=")])
    AST.AssignDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    AST.AssignMod -> prPrec i 0 (concatD [doc (showString "%=")])

instance Print AST.CompOp where
  prt i e = case e of
    AST.Lt -> prPrec i 0 (concatD [doc (showString "<")])
    AST.Leq -> prPrec i 0 (concatD [doc (showString "<=")])
    AST.Eq -> prPrec i 0 (concatD [doc (showString "==")])
    AST.Neq -> prPrec i 0 (concatD [doc (showString "!=")])
    AST.Geq -> prPrec i 0 (concatD [doc (showString ">=")])
    AST.Gt -> prPrec i 0 (concatD [doc (showString ">")])

instance Print AST.IncDecOp where
  prt i e = case e of
    AST.Inc -> prPrec i 0 (concatD [doc (showString "++")])
    AST.Dec -> prPrec i 0 (concatD [doc (showString "--")])

instance Print AST.SignOp where
  prt i e = case e of
    AST.Pos -> prPrec i 0 (concatD [doc (showString "+")])
    AST.Neg -> prPrec i 0 (concatD [doc (showString "-")])

instance Print AST.Literal where
  prt i e = case e of
    AST.LBool boolean -> prPrec i 0 (concatD [prt 0 boolean])
    AST.LChar c -> prPrec i 0 (concatD [prt 0 c])
    AST.LInt n -> prPrec i 0 (concatD [prt 0 n])
    AST.LFloat d -> prPrec i 0 (concatD [prt 0 d])
    AST.LString str -> prPrec i 0 (concatD [prt 0 str])

instance Print AST.Boolean where
  prt i e = case e of
    AST.BFalse -> prPrec i 0 (concatD [doc (showString "false")])
    AST.BTrue -> prPrec i 0 (concatD [doc (showString "true")])

instance Print [AST.Param] where
  prt = prtList

instance Print [AST.FDecl] where
  prt = prtList

instance Print [AST.VDecl] where
  prt = prtList

instance Print [AST.CDecl] where
  prt = prtList

instance Print [AST.DList] where
  prt = prtList

instance Print [AST.Stm] where
  prt = prtList

instance Print [AST.RExp] where
  prt = prtList


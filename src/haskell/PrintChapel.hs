{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintChapel.
--   Generated by the BNF converter.

module PrintChapel where

import qualified AbsChapel
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

instance Print Bool where
  prt _ False = doc (showString "false")
  prt _ True = doc (showString "true")

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsChapel.Ident where
  prt _ (AbsChapel.Ident i) = doc (showString i)

instance Print AbsChapel.Program where
  prt i e = case e of
    AbsChapel.Prog decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print AbsChapel.Decl where
  prt i e = case e of
    AbsChapel.FDecl id forms intent type_ block -> prPrec i 0 (concatD [doc (showString "proc"), prt 0 id, doc (showString "("), prt 0 forms, doc (showString ")"), prt 0 intent, doc (showString ":"), prt 0 type_, prt 0 block])
    AbsChapel.VList vdecls -> prPrec i 0 (concatD [doc (showString "var"), prt 0 vdecls, doc (showString ";")])
    AbsChapel.CList cdecls -> prPrec i 0 (concatD [doc (showString "param"), prt 0 cdecls, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsChapel.Form where
  prt i e = case e of
    AbsChapel.Form intent id type_ -> prPrec i 0 (concatD [prt 0 intent, prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsChapel.Intent where
  prt i e = case e of
    AbsChapel.In -> prPrec i 0 (concatD [doc (showString "in")])
    AbsChapel.Out -> prPrec i 0 (concatD [doc (showString "out")])
    AbsChapel.InOut -> prPrec i 0 (concatD [doc (showString "inout")])
    AbsChapel.Ref -> prPrec i 0 (concatD [doc (showString "ref")])
    AbsChapel.ConstIn -> prPrec i 0 (concatD [doc (showString "const"), doc (showString "in")])
    AbsChapel.ConstRef -> prPrec i 0 (concatD [doc (showString "const"), doc (showString "ref")])

instance Print AbsChapel.VDecl where
  prt i e = case e of
    AbsChapel.Solo id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
    AbsChapel.Init id type_ rexp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 rexp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsChapel.CDecl where
  prt i e = case e of
    AbsChapel.CDecl id type_ rexp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 rexp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsChapel.Type where
  prt i e = case e of
    AbsChapel.Type compound basic -> prPrec i 0 (concatD [prt 0 compound, prt 0 basic])

instance Print AbsChapel.Compound where
  prt i e = case e of
    AbsChapel.Simple -> prPrec i 0 (concatD [])
    AbsChapel.Array compound rexp -> prPrec i 0 (concatD [prt 0 compound, doc (showString "["), prt 0 rexp, doc (showString "]")])
    AbsChapel.Pointer compound -> prPrec i 0 (concatD [prt 0 compound, doc (showString "*")])

instance Print AbsChapel.Basic where
  prt i e = case e of
    AbsChapel.BBool -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsChapel.BChar -> prPrec i 0 (concatD [doc (showString "char")])
    AbsChapel.BInt -> prPrec i 0 (concatD [doc (showString "int")])
    AbsChapel.BReal -> prPrec i 0 (concatD [doc (showString "real")])
    AbsChapel.BString -> prPrec i 0 (concatD [doc (showString "string")])
    AbsChapel.BVoid -> prPrec i 0 (concatD [doc (showString "void")])

instance Print AbsChapel.Block where
  prt i e = case e of
    AbsChapel.Block decls stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 decls, prt 0 stms, doc (showString "}")])

instance Print AbsChapel.Stm where
  prt i e = case e of
    AbsChapel.StmBlock block -> prPrec i 0 (concatD [prt 0 block])
    AbsChapel.StmCall id rexps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexps, doc (showString ")"), doc (showString ";")])
    AbsChapel.PredW pwrite rexp -> prPrec i 0 (concatD [prt 0 pwrite, doc (showString "("), prt 0 rexp, doc (showString ")"), doc (showString ";")])
    AbsChapel.Assign lexp assignop rexp -> prPrec i 0 (concatD [prt 0 lexp, prt 0 assignop, prt 0 rexp, doc (showString ";")])
    AbsChapel.StmL lexp -> prPrec i 0 (concatD [prt 0 lexp, doc (showString ";")])
    AbsChapel.If rexp stm -> prPrec i 0 (concatD [doc (showString "if"), prt 0 rexp, doc (showString "then"), prt 0 stm])
    AbsChapel.IfElse rexp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 rexp, doc (showString "then"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    AbsChapel.While rexp stm -> prPrec i 0 (concatD [doc (showString "while"), prt 0 rexp, doc (showString "do"), prt 0 stm])
    AbsChapel.DoWhile stm rexp -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stm, doc (showString "while"), prt 0 rexp, doc (showString ";")])
    AbsChapel.For id range stm -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), prt 0 range, doc (showString "do"), prt 0 stm])
    AbsChapel.JmpStm jump -> prPrec i 0 (concatD [prt 0 jump, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsChapel.Jump where
  prt i e = case e of
    AbsChapel.Return -> prPrec i 0 (concatD [doc (showString "return")])
    AbsChapel.ReturnE rexp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 rexp])
    AbsChapel.Break -> prPrec i 0 (concatD [doc (showString "break")])
    AbsChapel.Continue -> prPrec i 0 (concatD [doc (showString "continue")])

instance Print AbsChapel.Range where
  prt i e = case e of
    AbsChapel.Range rexp1 rexp2 -> prPrec i 0 (concatD [doc (showString "{"), prt 0 rexp1, doc (showString ".."), prt 0 rexp2, doc (showString "}")])

instance Print AbsChapel.LExp where
  prt i e = case e of
    AbsChapel.Deref lexp -> prPrec i 0 (concatD [doc (showString "*"), prt 0 lexp])
    AbsChapel.Post lexp incdecop -> prPrec i 0 (concatD [prt 0 lexp, prt 0 incdecop])
    AbsChapel.Pre incdecop lexp -> prPrec i 0 (concatD [prt 0 incdecop, prt 0 lexp])
    AbsChapel.Access lexp rexp -> prPrec i 0 (concatD [prt 0 lexp, doc (showString "["), prt 0 rexp, doc (showString "]")])
    AbsChapel.Name id -> prPrec i 0 (concatD [prt 0 id])

instance Print AbsChapel.RExp where
  prt i e = case e of
    AbsChapel.Or rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "||"), prt 0 rexp2])
    AbsChapel.And rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "&&"), prt 0 rexp2])
    AbsChapel.Not rexp -> prPrec i 0 (concatD [doc (showString "!"), prt 0 rexp])
    AbsChapel.Comp rexp1 compop rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, prt 0 compop, prt 0 rexp2])
    AbsChapel.Arith rexp1 arithop rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, prt 0 arithop, prt 0 rexp2])
    AbsChapel.Sign signop rexp -> prPrec i 0 (concatD [prt 0 signop, prt 0 rexp])
    AbsChapel.RefE lexp -> prPrec i 0 (concatD [doc (showString "&"), prt 0 lexp])
    AbsChapel.RLExp lexp -> prPrec i 0 (concatD [prt 0 lexp])
    AbsChapel.ArrList rexps -> prPrec i 0 (concatD [doc (showString "["), prt 0 rexps, doc (showString "]")])
    AbsChapel.FCall id rexps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexps, doc (showString ")")])
    AbsChapel.PredR pread -> prPrec i 0 (concatD [prt 0 pread, doc (showString "("), doc (showString ")")])
    AbsChapel.Lit literal -> prPrec i 0 (concatD [prt 0 literal])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsChapel.PRead where
  prt i e = case e of
    AbsChapel.ReadChar -> prPrec i 0 (concatD [doc (showString "readChar")])
    AbsChapel.ReadInt -> prPrec i 0 (concatD [doc (showString "readInt")])
    AbsChapel.ReadFloat -> prPrec i 0 (concatD [doc (showString "readFloat")])
    AbsChapel.ReadString -> prPrec i 0 (concatD [doc (showString "readString")])

instance Print AbsChapel.PWrite where
  prt i e = case e of
    AbsChapel.WriteChar -> prPrec i 0 (concatD [doc (showString "writeChar")])
    AbsChapel.WriteInt -> prPrec i 0 (concatD [doc (showString "writeInt")])
    AbsChapel.WriteFloat -> prPrec i 0 (concatD [doc (showString "writeFloat")])
    AbsChapel.WriteString -> prPrec i 0 (concatD [doc (showString "writeString")])

instance Print AbsChapel.ArithOp where
  prt i e = case e of
    AbsChapel.Add -> prPrec i 0 (concatD [doc (showString "+")])
    AbsChapel.Sub -> prPrec i 0 (concatD [doc (showString "-")])
    AbsChapel.Mul -> prPrec i 0 (concatD [doc (showString "*")])
    AbsChapel.Div -> prPrec i 0 (concatD [doc (showString "/")])
    AbsChapel.Mod -> prPrec i 0 (concatD [doc (showString "%")])
    AbsChapel.Pow -> prPrec i 0 (concatD [doc (showString "^")])

instance Print AbsChapel.AssignOp where
  prt i e = case e of
    AbsChapel.AssignEq -> prPrec i 0 (concatD [doc (showString "=")])
    AbsChapel.AssignAdd -> prPrec i 0 (concatD [doc (showString "+=")])
    AbsChapel.AssignSub -> prPrec i 0 (concatD [doc (showString "-=")])
    AbsChapel.AssignMul -> prPrec i 0 (concatD [doc (showString "*=")])
    AbsChapel.AssignDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    AbsChapel.AssignMod -> prPrec i 0 (concatD [doc (showString "%=")])
    AbsChapel.AssignPow -> prPrec i 0 (concatD [doc (showString "^=")])

instance Print AbsChapel.CompOp where
  prt i e = case e of
    AbsChapel.Lt -> prPrec i 0 (concatD [doc (showString "<")])
    AbsChapel.Leq -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsChapel.Eq -> prPrec i 0 (concatD [doc (showString "==")])
    AbsChapel.Neq -> prPrec i 0 (concatD [doc (showString "!=")])
    AbsChapel.Geq -> prPrec i 0 (concatD [doc (showString ">=")])
    AbsChapel.Gt -> prPrec i 0 (concatD [doc (showString ">")])

instance Print AbsChapel.IncDecOp where
  prt i e = case e of
    AbsChapel.Inc -> prPrec i 0 (concatD [doc (showString "++")])
    AbsChapel.Dec -> prPrec i 0 (concatD [doc (showString "--")])

instance Print AbsChapel.SignOp where
  prt i e = case e of
    AbsChapel.Pos -> prPrec i 0 (concatD [doc (showString "+")])
    AbsChapel.Neg -> prPrec i 0 (concatD [doc (showString "-")])

instance Print AbsChapel.Literal where
  prt i e = case e of
    AbsChapel.LBool b -> prPrec i 0 (concatD [prt 0 b])
    AbsChapel.LChar c -> prPrec i 0 (concatD [prt 0 c])
    AbsChapel.LInt n -> prPrec i 0 (concatD [prt 0 n])
    AbsChapel.LReal d -> prPrec i 0 (concatD [prt 0 d])
    AbsChapel.LString str -> prPrec i 0 (concatD [prt 0 str])

-- instance Print AbsChapel.Boolean where
--   prt i e = case e of
--     AbsChapel.BFalse -> prPrec i 0 (concatD [doc (showString "false")])
--     AbsChapel.BTrue -> prPrec i 0 (concatD [doc (showString "true")])

instance Print [AbsChapel.Form] where
  prt = prtList

instance Print [AbsChapel.Decl] where
  prt = prtList

instance Print [AbsChapel.VDecl] where
  prt = prtList

instance Print [AbsChapel.CDecl] where
  prt = prtList

instance Print [AbsChapel.Stm] where
  prt = prtList

instance Print [AbsChapel.RExp] where
  prt = prtList


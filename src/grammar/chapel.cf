comment "//" ;
comment "/*" "*/" ;

entrypoints Program ;


-- PROGRAM /////////////////////////////////////////////////////////////////////

Prog.                       Program ::= [Decl] ;


-- DECLARATION ////////////////////////////////////////////////////////////////

FDecl.                      Decl ::= "proc" Ident "(" [Form] ")" Intent ":" Type Block ;

Form.                       Form ::= Intent Ident ":" Type ;

                                                                -- type compatibility && other
In.                         Intent ::= "in" ;                   -- actual <= formal
Out.                        Intent ::= "out" ;                  -- formal <= actual && actual is LExp
InOut.                      Intent ::= "inout";                 -- actual = formal && actual is LExp
Ref.                        Intent ::= "ref";                   -- actual = formal && actual is LExp
ConstIn.                    Intent ::= "const in";              -- actual <= formal && formal is immutable
ConstRef.                   Intent ::= "const ref";             -- actual = formal && actual is LExp && formal is immutable 
--_ .                       Intent ::= "" ;                     -- Empty intent is considered `in`


VList.                      Decl ::= "var" [VDecl] ";" ;
CList.						Decl ::= "param" [CDecl] ";" ;

Solo.                       VDecl ::= Ident ":" Type ;
Init.                       VDecl ::= Ident ":" Type "=" RExp ;

CDecl.                      CDecl ::= Ident ":" Type "=" RExp ;


-- TYPES ///////////////////////////////////////////////////////////////////////

Type.						Type ::= Compound Basic ;

Simple.						Compound ::= "" ;
Array.						Compound ::= Compound "[" RExp "]" ;
Pointer.					Compound ::= Compound "*" ;

BBool.						Basic ::= "bool" ;
BChar.						Basic ::= "char" ;
BInt.						Basic ::= "int" ;
BReal.						Basic ::= "real" ;
BString.					Basic ::= "string" ;
BVoid.                      Basic ::= "void" ;



-- STATEMENTS //////////////////////////////////////////////////////////////////

Block.                      Block ::= "{" [Decl] [Stm] "}" ;

StmBlock.                   Stm ::= Block ;
StmCall.                    Stm ::= Ident "(" [RExp] ")" ";" ;
PredW.                      Stm ::= PWrite "(" RExp ")" ";" ;
Assign.                     Stm ::= LExp AssignOp RExp ";" ;
StmL.                       Stm ::= LExp ";" ;

If.                         Stm ::= "if" RExp "then" Stm ;
--_ .                         Stm ::= "if" RExp Block ;
IfElse.                     Stm ::= "if" RExp "then" Stm "else" Stm ;
--_ .                         Stm ::= "if" RExp Block "else" Stm ;

While.                      Stm ::= "while" RExp "do" Stm ;
--_ .                         Stm ::= "while" RExp Block ;
DoWhile.                    Stm ::= "do" Stm "while" RExp ";" ;
For.                        Stm ::= "for" Ident "in" Range "do" Stm ;
--_ .                         Stm ::= "for" Ident "in" Range Block ;

JmpStm.                     Stm ::= Jump ";" ;

Return.                     Jump ::= "return" ;
ReturnE.                    Jump ::= "return" RExp ;
Break.                      Jump ::= "break" ;
Continue.                   Jump ::= "continue" ;

Range.                      Range ::= "{" RExp ".." RExp "}" ;


-- EXPRESSIONS /////////////////////////////////////////////////////////////////


Deref.                      LExp ::= "*" LExp ;
Post.                       LExp ::= LExp IncDecOp ;
Pre.                        LExp ::= IncDecOp LExp ;
Access.                     LExp ::= LExp "[" RExp "]" ;
Name.                       LExp ::= Ident ;


Or.                         RExp ::=  RExp "||" RExp ;
And.                        RExp ::= RExp "&&" RExp ;
Not.                        RExp ::= "!" RExp ;
Comp.                       RExp ::= RExp CompOp RExp ;
Arith.                      RExp ::= RExp ArithOp RExp ;
Sign.                       RExp ::= SignOp RExp ;
RefE.                       RExp ::= "&" LExp ;
RLExp.                      RExp ::= LExp ;
ArrList.                    RExp ::= "[" [RExp] "]" ;
FCall.                      RExp ::= Ident "(" [RExp] ")" ;
PredR.                      RExp ::= PRead "(" ")" ;
Lit.                        RExp ::= Literal ;


-- PREDEFINED FUNCTIONS ///////////////////////////////////////////////////////

ReadChar.                   PRead ::= "readChar" ;
ReadInt.                    PRead ::= "readInt" ;
ReadFloat.                  PRead ::= "readFloat" ;
ReadString.                 PRead ::= "readString" ;

WriteChar.                  PWrite ::= "writeChar" ;
WriteInt.                   PWrite ::= "writeInt" ;
WriteFloat.                 PWrite ::= "writeFloat" ;
WriteString.                PWrite ::= "writeString" ;


-- OPERATORS /////////////////////////////////////////////////////////////////

Add.                        ArithOp ::= "+" ;
Sub.                        ArithOp ::= "-" ;
Mul.                        ArithOp ::= "*" ;
Div.                        ArithOp ::= "/" ;
Mod.                        ArithOp ::= "%" ;
Pow.                        ArithOp ::= "**" ;

AssignEq.                   AssignOp ::= "=" ;
AssignAdd.                  AssignOp ::= "+=" ;
AssignSub.                  AssignOp ::= "-=" ;
AssignMul.                  AssignOp ::= "*=" ;
AssignDiv.                  AssignOp ::= "/=" ;
AssignMod.                  AssignOp ::= "%=" ;
AssignPow.                  AssignOp ::= "**=" ;

Lt.                         CompOp ::= "<" ;
Leq.                        CompOp ::= "<=" ;
Eq.                         CompOp ::= "==" ;
Neq.                        CompOp ::= "!=" ;
Geq.                        CompOp ::= ">=" ;
Gt.                         CompOp ::= ">" ;

Inc.                        IncDecOp ::= "++" ;
Dec.                        IncDecOp ::= "--" ;

Pos.                        SignOp ::= "+" ;
Neg.                        SignOp ::= "-" ;


-- LITERALS //////////////////////////////////////////////////////////////////

LBool.                      Literal ::= Boolean ;
LChar.                      Literal ::= Char ;
LInt.                       Literal ::= Integer ;
LReal.                      Literal ::= Double ;
LString.                    Literal ::= String ;

BFalse.                     Boolean ::= "false" ;
BTrue.                      Boolean ::= "true" ;

-- SEPARATORS ////////////////////////////////////////////////////////////////

separator Form "," ;
separator nonempty Decl "" ;
separator nonempty VDecl "," ;
separator nonempty CDecl "," ;
separator Stm "" ;
separator RExp "," ;

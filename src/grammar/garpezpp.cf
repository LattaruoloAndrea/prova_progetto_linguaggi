comment "//" ;
comment "/*" "*/" ;

entrypoints Program ;


-- PROGRAM /////////////////////////////////////////////////////////////////////

Prog.						Program ::= [FDecl] ;


-- DECLARATION ////////////////////////////////////////////////////////////////

separator nonempty FDecl "" ;
separator nonempty VDecl "," ;
separator nonempty CDecl "," ;

FDecl.						FDecl ::= RType Ident "(" [Param] ")" Block ;

VList.						DList  ::= Type [VDecl] ";" ;
CList.						DList  ::= "const" [CDecl] ";" ;

VSolo.						VDecl  ::= Ident ;
VInit.						VDecl  ::= Ident "=" RExp;

CDecl.						CDecl  ::= Ident "=" RExp;


-- TYPES ///////////////////////////////////////////////////////////////////////



-- EXPRESSIONS /////////////////////////////////////////////////////////////////

coercions LExp 4 ;
coercions RExp 10 ;

Deref.						LExp  ::= "*" LExp ;
Post.						LExp1 ::= LExp2 IncDecOp ;
Pre.						LExp2 ::= IncDecOp LExp3 ;
Access.						LExp3 ::= LExp3 "[" RExp "]" ;
Name.						LExp4 ::= Ident ;


Or.							RExp ::= RExp "||" RExp1 ;
And.						RExp1 ::= RExp1 "&&" RExp2 ;
Not.						RExp2 ::= "!" RExp3 ;
Comp.						RExp3 ::= RExp3 CompOp RExp4 ;
Add.						RExp4 ::= RExp4 "+" RExp5 ;
Sub.						RExp4 ::= RExp4 "-" RExp5 ;
Mul.						RExp5 ::= RExp5 "*" RExp6 ;
Div.						RExp5 ::= RExp5 "/" RExp6 ;
Rem.						RExp5 ::= RExp5 "%" RExp6 ;
Pow.						RExp6 ::= RExp7 "^" RExp6 ;
Sign.						RExp7 ::= SignOp RExp8 ;
Ref.						RExp7 ::= "&" LExp ;
Left.						RExp8 ::= LExp ;
FCall.						RExp9 ::= Ident "(" [RExp] ")" ;
PRead.						RExp9 ::= PRead "(" ")" ;
Lit.						RExp10 ::= Literal ;


-- PREDEFINED FUNCTIONS ///////////////////////////////////////////////////////

rules PRead  ::= "readChar" | "readInt" | "readFloat" | "readString" ;
rules PWrite ::= "writeChar" | "writeInt" | "writeFloat" | "writeString" ;


-- LITERALS //////////////////////////////////////////////////////////////////

rules Literal ::= Bool | Char | Integer | Double | String ;

token Bool {"false" | "true"} ;
comment "//" ;
comment "/*" "*/" ;

entrypoints Program ;


-- PROGRAM /////////////////////////////////////////////////////////////////////

-- TyC: { }
-- TAC: { P.code = f1.code ++ f2.code ++ ... ++ fn.code }
Prog.						Program ::= [FDecl] ;


-- DECLARATION ////////////////////////////////////////////////////////////////

-- TyC: { F.type = (RType.type, [p1.type, ..., pn.type]) }
-- TAC: { F.code = f.preamble ++ Block.code }
FDecl.						FDecl ::= RType Ident "(" [Param] ")" Block ;		

Param.						Param ::= Type PassBy Ident ;

PassVal.					PassBy ::= "val" ;
PassRef.					PassBy ::= "ref" ;

VList.						DList ::= Type [VDecl] ";" ;
CList.						DList ::= "const" [CDecl] ";" ;

VSolo.						VDecl ::= Ident ;
VInit.						VDecl ::= Ident "=" RExp;

CDecl.						CDecl ::= Ident "=" RExp;


-- TYPES ///////////////////////////////////////////////////////////////////////

Type.						Type ::= Basic Compound ;

Simple.						Compound ::= "" ;
Array.						Compound ::= Compound "[" RExp "]" ;
Pointer.					Compound ::= Compound "*" ;

BBool.						Basic ::= "bool" ;
BChar.						Basic ::= "char" ;
BInt.						Basic ::= "int" ;
BFloat.						Basic ::= "float" ;
BString.					Basic ::= "string" ;

RVoid.						RType ::= "void" ;
RBasic.						RType ::= Basic ;
RRef.						RType ::= Type "&" ;

-- STATEMENTS //////////////////////////////////////////////////////////////////

Block.						Block ::= "{" [DList] [Stm] "}" ;

StmBlock.					Stm ::= Block ;
StmCall.					Stm ::= Ident "(" [RExp] ")" ";" ;
PredW.						Stm ::= PWrite "(" RExp ")" ";" ;
Assign.						Stm ::= LExp AssignOp RExp ";" ;
StmL.						Stm ::= LExp ";" ;

If.							Stm ::= "if" "(" RExp ")" Stm ;
IfElse.						Stm ::= "if" "(" RExp ")" Stm "else" Stm ;

While.						Stm ::= "while" "(" RExp ")" Stm ;
DoWhile.					Stm ::= "do" Stm "while" "(" RExp ")" ";" ;
For.						Stm ::= "for" "(" Ident "=" RExp Dir RExp ")" Stm ;

JmpStm.						Stm ::= Jump ";" ;

UpTo.						Dir ::= "upto" ;
DownTo.						Dir ::= "downto" ;

Return.						Jump ::= "return" ;
ReturnE.					Jump ::= "return" RExp ;
Break.						Jump ::= "break" ;
Continue.					Jump ::= "continue" ;


-- EXPRESSIONS /////////////////////////////////////////////////////////////////

coercions LExp 4 ;
coercions RExp 10 ;

Deref.						LExp  ::= "*" LExp ;
Post.						LExp1 ::= LExp2 IncDecOp ;
Pre.						LExp2 ::= IncDecOp LExp3 ;
Access.						LExp3 ::= LExp3 "[" RExp "]" ;
Name.						LExp4 ::= Ident ;


Or.							RExp ::=  RExp "||" RExp1 ;
And.						RExp1 ::= RExp1 "&&" RExp2 ;
Not.						RExp2 ::= "!" RExp3 ;
Comp.						RExp3 ::= RExp3 CompOp RExp4 ;
Add.						RExp4 ::= RExp4 "+" RExp5 ;
Sub.						RExp4 ::= RExp4 "-" RExp5 ;
Mul.						RExp5 ::= RExp5 "*" RExp6 ;
Div.						RExp5 ::= RExp5 "/" RExp6 ;
Rem.						RExp5 ::= RExp5 "%" RExp6 ;
Pow.						RExp6 ::= RExp7 "^" RExp6 ;
Sign.						RExp7 ::= SignOp RExp8 ;
Ref.						RExp7 ::= "&" LExp ;
RLExp.						RExp8 ::= LExp ;
ArrList.					RExp9 ::= "[" [RExp] "]" ;
FCall.						RExp9 ::= Ident "(" [RExp] ")" ;
PredR.						RExp9 ::= PRead "(" ")" ;
Lit.						RExp10 ::= Literal ;


-- PREDEFINED FUNCTIONS ///////////////////////////////////////////////////////

ReadChar.					PRead ::= "readChar" ;
ReadInt.					PRead ::= "readInt" ;
ReadFloat.					PRead ::= "readFloat" ;
ReadString.					PRead ::= "readString" ;

WriteChar.					PWrite ::= "writeChar" ;
WriteInt.					PWrite ::= "writeInt" ;
WriteFloat.					PWrite ::= "writeFloat" ;
WriteString.				PWrite ::= "writeString" ;


-- OPERATORS /////////////////////////////////////////////////////////////////

AssignEq.					AssignOp ::= "=" ;
AssignAdd.					AssignOp ::= "+=" ;
AssignSub.					AssignOp ::= "-=" ;
AssignMul.					AssignOp ::= "*=" ;
AssignDiv.					AssignOp ::= "/=" ;
AssignMod.					AssignOp ::= "%=" ;

Lt.							CompOp ::= "<" ;
Leq.						CompOp ::= "<=" ;
Eq.							CompOp ::= "==" ;
Neq.						CompOp ::= "!=" ;
Geq.						CompOp ::= ">=" ;
Gt.							CompOp ::= ">" ;

Inc.						IncDecOp ::= "++" ;
Dec.						IncDecOp ::= "--" ;

Pos.						SignOp ::= "+" ;
Neg.						SignOp ::= "-" ;


-- LITERALS //////////////////////////////////////////////////////////////////

LBool.						Literal ::= Boolean ;
LChar.						Literal ::= Char ;
LInt.						Literal ::= Integer ;
LFloat.						Literal ::= Double ;
LString.					Literal ::= String ;

BFalse.						Boolean ::= "false" ;
BTrue.						Boolean ::= "true" ;

-- SEPARATORS ////////////////////////////////////////////////////////////////

separator Param "," ;
separator nonempty FDecl "" ;
separator nonempty VDecl "," ;
separator nonempty CDecl "," ;
separator DList "" ;
separator Stm "" ;
separator nonempty RExp "," ;
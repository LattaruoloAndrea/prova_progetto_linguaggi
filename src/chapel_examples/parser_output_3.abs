Prog [FDecl (Ident {idLoc = Loc {line = 1, column = 6}, idName = "fibonacci"}) [Form In (Ident {idLoc = Loc {line = 1, column = 16}, idName = "n"}) (Type Simple BInt)] In (Type Simple BInt) (Block {bLoc = Loc {line = 1, column = 31}, decls = [], stms = [If (Comp {reLoc = Loc {line = 2, column = 8}, lhs = RLExp {reLoc = Loc {line = 2, column = 6}, rhsL = Name (Ident {idLoc = Loc {line = 2, column = 6}, idName = "n"})}, comp = Leq, rhs = Lit {reLoc = Loc {line = 2, column = 11}, lit = LInt 1}}) (JmpStm (ReturnE {jmpLoc = Loc {line = 2, column = 18}, retE = RLExp {reLoc = Loc {line = 2, column = 25}, rhsL = Name (Ident {idLoc = Loc {line = 2, column = 25}, idName = "n"})}})),JmpStm (ReturnE {jmpLoc = Loc {line = 3, column = 3}, retE = Arith {reLoc = Loc {line = 3, column = 25}, lhs = FCall {reLoc = Loc {line = 3, column = 10}, fName = Ident {idLoc = Loc {line = 3, column = 10}, idName = "fibonacci"}, rList = [Arith {reLoc = Loc {line = 3, column = 21}, lhs = RLExp {reLoc = Loc {line = 3, column = 20}, rhsL = Name (Ident {idLoc = Loc {line = 3, column = 20}, idName = "n"})}, arith = Sub, rhs = Lit {reLoc = Loc {line = 3, column = 22}, lit = LInt 1}}]}, arith = Add, rhs = FCall {reLoc = Loc {line = 3, column = 27}, fName = Ident {idLoc = Loc {line = 3, column = 27}, idName = "fibonacci"}, rList = [Arith {reLoc = Loc {line = 3, column = 38}, lhs = RLExp {reLoc = Loc {line = 3, column = 37}, rhsL = Name (Ident {idLoc = Loc {line = 3, column = 37}, idName = "n"})}, arith = Sub, rhs = Lit {reLoc = Loc {line = 3, column = 39}, lit = LInt 2}}]}}})]}),FDecl (Ident {idLoc = Loc {line = 6, column = 6}, idName = "addThree"}) [Form In (Ident {idLoc = Loc {line = 6, column = 18}, idName = "n"}) (Type Simple BInt)] Out (Type Simple BInt) (Block {bLoc = Loc {line = 6, column = 32}, decls = [CList [CDecl (Ident {idLoc = Loc {line = 7, column = 9}, idName = "p"}) (Type Simple BInt) (Lit {reLoc = Loc {line = 7, column = 18}, lit = LInt 5})]], stms = [JmpStm (ReturnE {jmpLoc = Loc {line = 8, column = 3}, retE = Arith {reLoc = Loc {line = 8, column = 15}, lhs = Arith {reLoc = Loc {line = 8, column = 12}, lhs = RLExp {reLoc = Loc {line = 8, column = 10}, rhsL = Name (Ident {idLoc = Loc {line = 8, column = 10}, idName = "n"})}, arith = Add, rhs = Lit {reLoc = Loc {line = 8, column = 14}, lit = LInt 3}}, arith = Add, rhs = RLExp {reLoc = Loc {line = 8, column = 16}, rhsL = Name (Ident {idLoc = Loc {line = 8, column = 16}, idName = "p"})}}})]}),FDecl (Ident {idLoc = Loc {line = 11, column = 6}, idName = "doublePrint"}) [Form InOut (Ident {idLoc = Loc {line = 11, column = 24}, idName = "thing"}) (Type Simple BString)] Out (Type Simple BString) (Block {bLoc = Loc {line = 11, column = 50}, decls = [VList [Init (Ident {idLoc = Loc {line = 12, column = 7}, idName = "p"}) (Type Simple BInt) (Lit {reLoc = Loc {line = 12, column = 16}, lit = LInt 5})]], stms = [JmpStm (ReturnE {jmpLoc = Loc {line = 13, column = 3}, retE = Arith {reLoc = Loc {line = 13, column = 16}, lhs = RLExp {reLoc = Loc {line = 13, column = 10}, rhsL = Name (Ident {idLoc = Loc {line = 13, column = 10}, idName = "thing"})}, arith = Add, rhs = RLExp {reLoc = Loc {line = 13, column = 18}, rhsL = Name (Ident {idLoc = Loc {line = 13, column = 18}, idName = "thing"})}}})]}),FDecl (Ident {idLoc = Loc {line = 16, column = 6}, idName = "defaultsProc"}) [Form In (Ident {idLoc = Loc {line = 16, column = 22}, idName = "x"}) (Type Simple BInt),Form Ref (Ident {idLoc = Loc {line = 16, column = 33}, idName = "y"}) (Type Simple BReal)] In (Type Simple BReal) (Block {bLoc = Loc {line = 16, column = 48}, decls = [], stms = [JmpStm (ReturnE {jmpLoc = Loc {line = 17, column = 3}, retE = Arith {reLoc = Loc {line = 17, column = 11}, lhs = RLExp {reLoc = Loc {line = 17, column = 10}, rhsL = Name (Ident {idLoc = Loc {line = 17, column = 10}, idName = "x"})}, arith = Add, rhs = RLExp {reLoc = Loc {line = 17, column = 12}, rhsL = Name (Ident {idLoc = Loc {line = 17, column = 12}, idName = "y"})}}})]})]

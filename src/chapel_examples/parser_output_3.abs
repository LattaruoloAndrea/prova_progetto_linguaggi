Prog [FDecl (Ident "fibonacci") [Form In (Ident "n") (Type Simple BInt)] In (Type Simple BInt) (Block [] [If (Comp (RLExp (Name (Ident "n"))) Leq (Lit (LInt 1))) (JmpStm (ReturnE (RLExp (Name (Ident "n"))))),JmpStm (ReturnE (Arith (FCall (Ident "fibonacci") [Arith (RLExp (Name (Ident "n"))) Sub (Lit (LInt 1))]) Add (FCall (Ident "fibonacci") [Arith (RLExp (Name (Ident "n"))) Sub (Lit (LInt 2))])))]),FDecl (Ident "addThree") [Form In (Ident "n") (Type Simple BInt)] Out (Type Simple BInt) (Block [CList [CDecl (Ident "p") (Type Simple BInt) (Lit (LInt 5))]] [JmpStm (ReturnE (Arith (Arith (RLExp (Name (Ident "n"))) Add (Lit (LInt 3))) Add (RLExp (Name (Ident "p")))))]),FDecl (Ident "doublePrint") [Form InOut (Ident "thing") (Type Simple BString)] Out (Type Simple BString) (Block [VList [Init (Ident "p") (Type Simple BInt) (Lit (LInt 5))]] [JmpStm (ReturnE (Arith (RLExp (Name (Ident "thing"))) Add (RLExp (Name (Ident "thing")))))]),FDecl (Ident "defaultsProc") [Form In (Ident "x") (Type Simple BInt),Form Ref (Ident "y") (Type Simple BReal)] In (Type Simple BReal) (Block [] [JmpStm (ReturnE (Arith (RLExp (Name (Ident "x"))) Add (RLExp (Name (Ident "y")))))])]

{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintChapel.
--   Generated by the BNF converter.

module PrintChapel where

import qualified AbsChapel as A
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "{-"     :ts -> showChar '{'. showChar ' ' . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    "-}"     :ts -> showChar '}' . showChar ' ' . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

instance Print Bool where
  prt _ False = doc (showString "false")
  prt _ True = doc (showString "true")

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print A.Ident where
  prt _ (A.Ident _ i) = doc (showString i)

instance Print (A.Program t) where
  prt i e = case e of
    A.Prog decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print (A.Decl t) where
  prt i e = case e of
    A.FDecl id forms intent type_ block -> prPrec i 0 (concatD [doc (showString "proc"), prt 0 id, doc (showString "("), prt 0 forms, doc (showString ")"), prt 0 intent, doc (showString ":"), prt 0 type_, prt 0 block])
    A.VList vdecls -> prPrec i 0 (concatD [doc (showString "var"), prt 0 vdecls, doc (showString ";")])
    A.CList cdecls -> prPrec i 0 (concatD [doc (showString "param"), prt 0 cdecls, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (A.Form t) where
  prt i e = case e of
    A.Form intent id type_ -> prPrec i 0 (concatD [prt 0 intent, prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print A.Intent where
  prt i e = case e of
    A.In -> prPrec i 0 (concatD [doc (showString "in")])
    A.Out -> prPrec i 0 (concatD [doc (showString "out")])
    A.InOut -> prPrec i 0 (concatD [doc (showString "inout")])
    A.Ref -> prPrec i 0 (concatD [doc (showString "ref")])
    A.ConstIn -> prPrec i 0 (concatD [doc (showString "const"), doc (showString "in")])
    A.ConstRef -> prPrec i 0 (concatD [doc (showString "const"), doc (showString "ref")])

instance Print (A.VDecl t) where
  prt i e = case e of
    A.Solo id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
    A.Init id type_ rexp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 rexp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (A.CDecl t) where
  prt i e = case e of
    A.CDecl id type_ rexp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 rexp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (A.Type t) where
  prt i e = case e of
    A.Type compound basic -> prPrec i 0 (concatD [prt 0 compound, prt 0 basic])

instance Print (A.Compound t) where
  prt i e = case e of
    A.Simple -> prPrec i 0 (concatD [])
    A.Array compound rexp -> prPrec i 0 (concatD [prt 0 compound, doc (showString "["), prt 0 rexp, doc (showString "]")])
    A.Pointer compound -> prPrec i 0 (concatD [prt 0 compound, doc (showString "*")])

instance Print A.Basic where
  prt i e = case e of
    A.BBool -> prPrec i 0 (concatD [doc (showString "bool")])
    A.BChar -> prPrec i 0 (concatD [doc (showString "char")])
    A.BInt -> prPrec i 0 (concatD [doc (showString "int")])
    A.BReal -> prPrec i 0 (concatD [doc (showString "real")])
    A.BString -> prPrec i 0 (concatD [doc (showString "string")])
    A.BVoid -> prPrec i 0 (concatD [doc (showString "void")])

instance Print (A.Block t) where
  prt i e = case e of
    A.Block _ decls stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 decls, prt 0 stms, doc (showString "}")])

instance Print (A.Stm t) where
  prt i e = case e of
    A.StmBlock block -> prPrec i 0 (concatD [prt 0 block])
    A.StmCall id rexps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexps, doc (showString ")"), doc (showString ";")])
    A.Assign lexp assignop rexp -> prPrec i 0 (concatD [prt 0 lexp, prt 0 assignop, prt 0 rexp, doc (showString ";")])
    A.StmL lexp -> prPrec i 0 (concatD [prt 0 lexp, doc (showString ";")])
    A.If rexp stm -> prPrec i 0 (concatD [doc (showString "if"), prt 0 rexp, doc (showString "then"), prt 0 stm])
    A.IfElse rexp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 rexp, doc (showString "then"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    A.While rexp stm -> prPrec i 0 (concatD [doc (showString "while"), prt 0 rexp, doc (showString "do"), prt 0 stm])
    A.DoWhile stm rexp -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stm, doc (showString "while"), prt 0 rexp, doc (showString ";")])
    A.For id range stm -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), prt 0 range, doc (showString "do"), prt 0 stm])
    A.JmpStm jump -> prPrec i 0 (concatD [prt 0 jump, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (A.Jump t) where
  prt i e = case e of
    A.Return _ -> prPrec i 0 (concatD [doc (showString "return")])
    A.ReturnE _ rexp _ -> prPrec i 0 (concatD [doc (showString "return"), prt 0 rexp])
    A.Break _ -> prPrec i 0 (concatD [doc (showString "break")])
    A.Continue _ -> prPrec i 0 (concatD [doc (showString "continue")])

--A.If rexp stm -> prPrec i 0 (concatD [doc (showString "if"), prt 0 rexp, doc (showString "then"), prt 0 stm])
instance Print (A.Range t) where
  prt i e = case e of
    A.Range _ rexp1 rexp2 -> prPrec i 0 (concatD [doc (showString "{-"), prt 0 rexp1, doc (showString ".."), prt 0 rexp2, doc (showString "-}")])

instance Print (A.LExp t) where
  prt i e = case e of
    A.Deref lexp _ -> prPrec i 0 (concatD [doc (showString "*"), prt 0 lexp])
    -- A.Post lexp incdecop -> prPrec i 0 (concatD [prt 0 lexp, prt 0 incdecop])
    -- A.Pre incdecop lexp -> prPrec i 0 (concatD [prt 0 incdecop, prt 0 lexp])
    A.Access lexp rexp _ -> prPrec i 0 (concatD [prt 0 lexp, doc (showString "["), prt 0 rexp, doc (showString "]")])
    A.Name id _ -> prPrec i 0 (concatD [prt 0 id])

instance Print (A.RExp t) where
  prt i e = case e of
    A.Or _ rexp1 rexp2 _ -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "||"), prt 0 rexp2])
    A.And _ rexp1 rexp2 _ -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "&&"), prt 0 rexp2])
    A.Not _ rexp _ -> prPrec i 0 (concatD [doc (showString "!"), prt 0 rexp])
    A.Comp _ rexp1 compop rexp2 _ -> prPrec i 0 (concatD [prt 0 rexp1, prt 0 compop, prt 0 rexp2])
    A.Arith _ rexp1 arithop rexp2 _ -> prPrec i 0 (concatD [prt 0 rexp1, prt 0 arithop, prt 0 rexp2])
    A.Sign _ signop rexp _ -> prPrec i 0 (concatD [prt 0 signop, prt 0 rexp])
    A.RefE _ lexp _ -> prPrec i 0 (concatD [doc (showString "&"), prt 0 lexp])
    A.RLExp _ lexp _ -> prPrec i 0 (concatD [prt 0 lexp])
    A.ArrList _ rexps _ -> prPrec i 0 (concatD [doc (showString "["), prt 0 rexps, doc (showString "]")])
    A.FCall _ id rexps _ -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexps, doc (showString ")")])
    A.Lit _ literal _ -> prPrec i 0 (concatD [prt 0 literal])
    A.Coerce _ _ -> id
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (A.ArithOp t) where
  prt i e = case e of
    A.Add _ -> prPrec i 0 (concatD [doc (showString "+")])
    A.Sub _ -> prPrec i 0 (concatD [doc (showString "-")])
    A.Mul _ -> prPrec i 0 (concatD [doc (showString "*")])
    A.Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    A.Mod   -> prPrec i 0 (concatD [doc (showString "%")])
    A.Pow _ -> prPrec i 0 (concatD [doc (showString "^")])

instance Print (A.AssignOp t) where
  prt i e = case e of
    A.AssignEq  _ _ -> prPrec i 0 (concatD [doc (showString "=")])
    A.AssignAdd _ _ -> prPrec i 0 (concatD [doc (showString "+=")])
    A.AssignSub _ _ -> prPrec i 0 (concatD [doc (showString "-=")])
    A.AssignMul _ _ -> prPrec i 0 (concatD [doc (showString "*=")])
    A.AssignDiv _ _ -> prPrec i 0 (concatD [doc (showString "/=")])
    A.AssignMod _   -> prPrec i 0 (concatD [doc (showString "%=")])
    A.AssignPow _ _ -> prPrec i 0 (concatD [doc (showString "^=")])

instance Print (A.CompOp t) where
  prt i e = case e of
    A.Lt  _ -> prPrec i 0 (concatD [doc (showString "<")])
    A.Leq _ -> prPrec i 0 (concatD [doc (showString "<=")])
    A.Eq  _ -> prPrec i 0 (concatD [doc (showString "==")])
    A.Neq _ -> prPrec i 0 (concatD [doc (showString "!=")])
    A.Geq _ -> prPrec i 0 (concatD [doc (showString ">=")])
    A.Gt  _ -> prPrec i 0 (concatD [doc (showString ">")])

-- instance Print A.IncDecOp where
--   prt i e = case e of
--     A.Inc -> prPrec i 0 (concatD [doc (showString "++")])
--     A.Dec -> prPrec i 0 (concatD [doc (showString "--")])

instance Print (A.SignOp t) where
  prt i e = case e of
    A.Pos _ -> prPrec i 0 (concatD [doc (showString "+")])
    A.Neg _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print A.Literal where
  prt i e = case e of
    A.LBool b -> prPrec i 0 (concatD [prt 0 b])
    A.LChar c -> prPrec i 0 (concatD [prt 0 c])
    A.LInt n -> prPrec i 0 (concatD [prt 0 n])
    A.LReal d -> prPrec i 0 (concatD [prt 0 d])
    A.LString str -> prPrec i 0 (concatD [prt 0 str])

-- instance Print A.Boolean where
--   prt i e = case e of
--     A.BFalse -> prPrec i 0 (concatD [doc (showString "false")])
--     A.BTrue -> prPrec i 0 (concatD [doc (showString "true")])

instance Print [A.Form t] where
  prt = prtList

instance Print [A.Decl t] where
  prt = prtList

instance Print [A.VDecl t] where
  prt = prtList

instance Print [A.CDecl t] where
  prt = prtList

instance Print [A.Stm t] where
  prt = prtList

instance Print [A.RExp t] where
  prt = prtList


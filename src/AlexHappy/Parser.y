-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGarpezpp where
import qualified AbstractSyntaxTree as AST
import LexGarpezpp
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '%=' { PT _ (TS _ 4) }
  '&' { PT _ (TS _ 5) }
  '&&' { PT _ (TS _ 6) }
  '(' { PT _ (TS _ 7) }
  ')' { PT _ (TS _ 8) }
  '*' { PT _ (TS _ 9) }
  '*=' { PT _ (TS _ 10) }
  '+' { PT _ (TS _ 11) }
  '++' { PT _ (TS _ 12) }
  '+=' { PT _ (TS _ 13) }
  ',' { PT _ (TS _ 14) }
  '-' { PT _ (TS _ 15) }
  '--' { PT _ (TS _ 16) }
  '-=' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  '/=' { PT _ (TS _ 19) }
  ';' { PT _ (TS _ 20) }
  '<' { PT _ (TS _ 21) }
  '<=' { PT _ (TS _ 22) }
  '=' { PT _ (TS _ 23) }
  '==' { PT _ (TS _ 24) }
  '>' { PT _ (TS _ 25) }
  '>=' { PT _ (TS _ 26) }
  '[' { PT _ (TS _ 27) }
  ']' { PT _ (TS _ 28) }
  '^' { PT _ (TS _ 29) }
  'bool' { PT _ (TS _ 30) }
  'break' { PT _ (TS _ 31) }
  'char' { PT _ (TS _ 32) }
  'const' { PT _ (TS _ 33) }
  'continue' { PT _ (TS _ 34) }
  'do' { PT _ (TS _ 35) }
  'downto' { PT _ (TS _ 36) }
  'else' { PT _ (TS _ 37) }
  'false' { PT _ (TS _ 38) }
  'float' { PT _ (TS _ 39) }
  'for' { PT _ (TS _ 40) }
  'if' { PT _ (TS _ 41) }
  'int' { PT _ (TS _ 42) }
  'readChar' { PT _ (TS _ 43) }
  'readFloat' { PT _ (TS _ 44) }
  'readInt' { PT _ (TS _ 45) }
  'readString' { PT _ (TS _ 46) }
  'ref' { PT _ (TS _ 47) }
  'return' { PT _ (TS _ 48) }
  'string' { PT _ (TS _ 49) }
  'true' { PT _ (TS _ 50) }
  'upto' { PT _ (TS _ 51) }
  'val' { PT _ (TS _ 52) }
  'void' { PT _ (TS _ 53) }
  'while' { PT _ (TS _ 54) }
  'writeChar' { PT _ (TS _ 55) }
  'writeFloat' { PT _ (TS _ 56) }
  'writeInt' { PT _ (TS _ 57) }
  'writeString' { PT _ (TS _ 58) }
  '{' { PT _ (TS _ 59) }
  '||' { PT _ (TS _ 60) }
  '}' { PT _ (TS _ 61) }
  L_ident  { PT _ (TV $$) }
  L_charac { PT _ (TC $$) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident   :: { AST.Posn AST.Ident }
Ident    : L_ident  { AST.Posn { pos = tokenLineCol $1, value = AST.Ident (prToken $1)} }

Char    :: { Char }
Char     : L_charac { (read ( $1)) :: Char }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ( $1)) :: Double }

String  :: { String }
String   : L_quoted {  $1 }

Program :: { AST.Program }
Program : ListFDecl { AST.Prog $1 }

FDecl :: { AST.Posn AST.FDecl }
FDecl : RType Ident '(' ListParam ')' Block { AST.Posn { pos = pos $2, value = AST.FDecl $1 $2 $4 $6 } }

Param :: { AST.Posn AST.Param }
Param : Type PassBy Ident { AST.Posn { pos = pos $3, value = AST.Param $1 $2 $3 } }

PassBy :: { AST.PassBy }
PassBy : 'val' { AST.PassVal }
       | 'ref' { AST.PassRef }

DList :: { AST.DList }
DList : Type ListVDecl ';' { AST.VList $1 $2 }
      | 'const' ListCDecl ';' { AST.CList $2 }

VDecl :: { AST.Posn AST.VDecl }
VDecl : Ident { AST.Posn { pos = pos $1, value = AST.VSolo $1 } }
      | Ident '=' RExp { AST.Posn { pos = pos $1, value = AST.VInit $1 $3 } }

CDecl :: { AST.Posn AST.CDecl }
CDecl : Ident '=' RExp { AST.Posn { pos = pos $1, value = AST.CDecl $1 $3 } }

Type :: { AST.Type }
Type : Basic Compound { AST.Type $1 $2 }

Compound :: { AST.Compound }
Compound : {- empty -} { AST.Simple }
         | Compound '[' RExp ']' { AST.Array $1 $3 }
         | Compound '*' { AST.Pointer $1 }

Basic :: { AST.Basic }
Basic : 'bool' { AST.BBool }
      | 'char' { AST.BChar }
      | 'int' { AST.BInt }
      | 'float' { AST.BFloat }
      | 'string' { AST.BString }

RType :: { AST.RType }
RType : 'void' { AST.RVoid }
      | Basic { AST.RBasic $1 }
      | Type '&' { AST.RRef $1 }

Block :: { AST.Posn AST.Block }
Block : '{' ListDList ListStm '}' { AST.Posn { pos = tokenLineCol $1, value = AST.Block (reverse $2) (reverse $3) } }

Stm :: { AST.Posn AST.Stm }
Stm : Block { AST.Posn { pos = pos $1, value = AST.StmBlock $1 } }
    | Ident '(' ListRExp ')' ';' { AST.Posn { pos = pos $1, value = AST.StmCall $1 $3 } }
    | PWrite '(' RExp ')' ';' { AST.Posn { pos = pos $1, value = AST.PredW $1 $3 } }
    | LExp AssignOp RExp ';' { AST.Posn { pos = pos $1, value = AST.Assign $1 $2 $3 } }
    | LExp ';' { AST.Posn { pos = tokenLineCol $ 1, value = AST.StmL $1 } }
    | 'if' '(' RExp ')' Stm { AST.Posn { pos = tokenLineCol $1, value = AST.If $3 $5 } }
    | 'if' '(' RExp ')' Stm 'else' Stm { AST.Posn { pos = tokenLineCol $1, value = AST.IfElse $3 $5 $7 } }
    | 'while' '(' RExp ')' Stm { AST.Posn { pos = tokenLineCol $1, value = AST.While $3 $5 } }
    | 'do' Stm 'while' '(' RExp ')' ';' { AST.Posn { pos = tokenLineCol $1, value = AST.DoWhile $2 $5 } }
    | 'for' '(' Ident '=' RExp Dir RExp ')' Stm { AST.Posn { pos = tokenLineCol $1, value = AST.For $3 $5 $6 $7 $9 } }
    | Jump ';' { AST.Posn { pos = pos $1, value = AST.JmpStm $1 } }

Dir :: { AST.Dir }
Dir : 'upto' { AST.UpTo } | 'downto' { AST.DownTo }

Jump :: { AST.Posn AST.Jump }
Jump : 'return' { AST.Posn { pos = tokenLineCol $1, value = AST.Return } }
     | 'return' RExp { AST.Posn { pos = tokenLineCol $1, value = AST.ReturnE $2 } }
     | 'break' { AST.Posn { pos = tokenLineCol $1, value = AST.Break } }
     | 'continue' { AST.Posn { pos = tokenLineCol = $1, value = AST.Continue } }

LExp :: { AST.Posn AST.LExp }
LExp : LExp1 { $1 } | '*' LExp { AST.Posn { pos = tokenLineCol $ 1, value = AST.Deref $2 } }

LExp1 :: { AST.Posn AST.LExp }
LExp1 : LExp2 { $1 } | LExp2 IncDecOp { AST.Post $1 $2 }

LExp2 :: { LExp }
LExp2 : LExp3 { $1 } | IncDecOp LExp3 { AST.Pre $1 $2 }
LExp3 :: { LExp }
LExp3 : LExp4 { $1 }
      | LExp3 '[' RExp ']' { AST.Access $1 $3 }
LExp4 :: { LExp }
LExp4 : '(' LExp ')' { $2 } | Ident { AST.Name $1 }
RExp :: { RExp }
RExp : RExp1 { $1 } | RExp '||' RExp1 { AST.Or $1 $3 }
RExp1 :: { RExp }
RExp1 : RExp2 { $1 } | RExp1 '&&' RExp2 { AST.And $1 $3 }
RExp2 :: { RExp }
RExp2 : RExp3 { $1 } | '!' RExp3 { AST.Not $2 }
RExp3 :: { RExp }
RExp3 : RExp4 { $1 }
      | RExp3 CompOp RExp4 { AST.Comp $1 $2 $3 }
RExp4 :: { RExp }
RExp4 : RExp5 { $1 }
      | RExp4 '+' RExp5 { AST.Add $1 $3 }
      | RExp4 '-' RExp5 { AST.Sub $1 $3 }
RExp5 :: { RExp }
RExp5 : RExp6 { $1 }
      | RExp5 '*' RExp6 { AST.Mul $1 $3 }
      | RExp5 '/' RExp6 { AST.Div $1 $3 }
      | RExp5 '%' RExp6 { AST.Rem $1 $3 }
RExp6 :: { RExp }
RExp6 : RExp7 { $1 } | RExp7 '^' RExp6 { AST.Pow $1 $3 }
RExp7 :: { RExp }
RExp7 : RExp8 { $1 }
      | SignOp RExp8 { AST.Sign $1 $2 }
      | '&' LExp { AST.Ref $2 }
RExp8 :: { RExp }
RExp8 : RExp9 { $1 } | LExp { AST.RLExp $1 }
RExp9 :: { RExp }
RExp9 : RExp10 { $1 }
      | '[' ListRExp ']' { AST.ArrList $2 }
      | Ident '(' ListRExp ')' { AST.FCall $1 $3 }
      | PRead '(' ')' { AST.PredR $1 }
RExp10 :: { RExp }
RExp10 : '(' RExp ')' { $2 } | Literal { AST.Lit $1 }
PRead :: { PRead }
PRead : 'readChar' { AST.ReadChar }
      | 'readInt' { AST.ReadInt }
      | 'readFloat' { AST.ReadFloat }
      | 'readString' { AST.ReadString }
PWrite :: { PWrite }
PWrite : 'writeChar' { AST.WriteChar }
       | 'writeInt' { AST.WriteInt }
       | 'writeFloat' { AST.WriteFloat }
       | 'writeString' { AST.WriteString }
AssignOp :: { AssignOp }
AssignOp : '=' { AST.AssignEq }
         | '+=' { AST.AssignAdd }
         | '-=' { AST.AssignSub }
         | '*=' { AST.AssignMul }
         | '/=' { AST.AssignDiv }
         | '%=' { AST.AssignMod }
CompOp :: { CompOp }
CompOp : '<' { AST.Lt }
       | '<=' { AST.Leq }
       | '==' { AST.Eq }
       | '!=' { AST.Neq }
       | '>=' { AST.Geq }
       | '>' { AST.Gt }
IncDecOp :: { IncDecOp }
IncDecOp : '++' { AST.Inc } | '--' { AST.Dec }
SignOp :: { SignOp }
SignOp : '+' { AST.Pos } | '-' { AST.Neg }
Literal :: { Literal }
Literal : Boolean { AST.LBool $1 }
        | Char { AST.LChar $1 }
        | Integer { AST.LInt $1 }
        | Double { AST.LFloat $1 }
        | String { AST.LString $1 }
Boolean :: { Boolean }
Boolean : 'false' { AST.BFalse }
        | 'true' { AST.BTrue }
ListParam :: { [Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ',' ListParam { (:) $1 $3 }

ListFDecl :: { [Posn FDecl] }
ListFDecl : FDecl { (:[]) $1 } 
          | FDecl ListFDecl { (:) $1 $2 }

ListVDecl :: { [VDecl] }
ListVDecl : VDecl { (:[]) $1 } | VDecl ',' ListVDecl { (:) $1 $3 }
ListCDecl :: { [CDecl] }
ListCDecl : CDecl { (:[]) $1 } | CDecl ',' ListCDecl { (:) $1 $3 }
ListDList :: { [DList] }
ListDList : {- empty -} { [] } | ListDList DList { flip (:) $1 $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
ListRExp :: { [RExp] }
ListRExp : RExp { (:[]) $1 } | RExp ',' ListRExp { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}


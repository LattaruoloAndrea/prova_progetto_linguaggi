entrypoints Program ;


-- PROGRAM //////////////////////////////////////

Prog.				Program ::= [Global] ;

separator Global "";
terminator Global "";


FunDecl.			Global ::= FunctionDefinition ;
EntityDeclL.		Global ::= EntityDeclarationList ;

-- FUNCTIONS AND PROCEDURES

FunDef.				FunctionDefinition ::= Qualified_FType Id "(" [FormalParam] ")" Block ;

FormParam.			FormalParam ::= Qualified_FType Id ;

separator FormalParam "," ;
terminator FormalParam "" ;

EntityList.			EntityDeclarationList ::= Qualified_Type [EntityDecl] ;
GenericEntity.		EntityDecl ::= Id ;
InitEntity.			EntityDecl ::= Id "=" RExp ;

separator nonempty EntityDecl "," ;
terminator nonempty EntityDecl ";";

-- Blocks and statements

Blk.				Block ::= "{" [Statement] "}" ;

StmDecl.			Statement ::= EntityDeclarationList ;

separator Statement ";" ;
terminator Statement "" ;

-- REXP

RLiteral.			RExp ::= Literal ;

Int.				Literal ::= PInt ;
Float.				Literal ::= PFloat ;



-- TYPES

QualifiedFT1.		Qualified_FType ::= Qualified_Type ;
QualifiedFT2.		Qualified_FType ::= Qualifier "void" ;

Qualified_T1.		Qualified_Type ::= Qualifier Type ;

NoQualifier.		Qualifier ::= "" ;
ConstQualifier.		Qualifier ::= "const" ;

SType.				Type ::= SimpleType ;
PType.				Type ::= SimpleType Pointer ;

IntType.			SimpleType ::= "int" ;
FloatType.			SimpleType ::= "float" ;

Pointer1.			Pointer ::= "*" ;
PointerP.			Pointer ::= Pointer "*" ;


-- TOKENS

position token Id		( letter (letter | digit | '_')* ) ;

position token PInt		( digit+ ) ;
position token PFloat	( digit+ '.' digit+)
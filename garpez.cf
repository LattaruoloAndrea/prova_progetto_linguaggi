entrypoints Program ;

comment "//" ;
comment "/*" "*/" ;

-- PROGRAM //////////////////////////////////////////
Progr.              Program ::= [Decl] ;
StmDecl.            Decl ::= Stm ;
DefDecl.            Decl ::= Def ;


-- DEFINITIONS //////////////////////////////////////
DefConst.           Def ::= ConstDef ;
DefVar.             Def ::= VarDef ;
DefFun.             Def ::= FunDef ;


-- CONSTANTS ////////////////////////////////////////
Const.              ConstDef ::= "const" Id "=" RExp ";" ;
ConstList.          ConstDef ::= "const" [ConstDecl] ;
ConstMult.          ConstDecl ::= Id "=" RExp ;

separator ConstDecl "," ;
terminator ConstDecl ";" ;


-- VARIABLES ////////////////////////////////////////
SingleVar.          VarDef ::= Type Id ";" ;
MulVar.             VarDef ::= Type Id "," [Id] ;

separator Id "," ;
terminator Id ";" ;

SingleVarInit.      VarDef ::= Type Id "=" RExp ";" ;
MulVarInit.         VarDef ::= Type Id "=" RExp "," [VarDecl] ;
VarList.            VarDecl ::= Id "=" RExp ;

separator VarDecl "," ;
terminator VarDecl ";" ;

-- FUNCTIONS/PROCEDURES /////////////////////////////
FuncProc.           FunDef ::= RetType Id "(" [Param] ")" Block ;
Param.              Param ::= PassBy Type ;

separator Param "," ;

PValue.             PassBy ::= "" ;
PReference.         PassBy ::= "ref" ;
PConst.             PassBy ::= "const" ;
PRes.               PassBy ::= "res" ;
PValRes.            PassBy ::= "valres" ;
"PName".            PassBy ::= "name" ;

RType.              RetType ::= Type ;
RVoid.              RetType ::= "void" ;
RRef.               RetType ::= "&" Type ;

-- TYPES ////////////////////////////////////////////
TArray.				Type ::= Type "[" "]" ;
TarrayLength.		Type ::= Type "[" RExp "]" ;
TBool.			  	Type ::= "bool" ;
TFloat.		     	Type ::= "float" ;
TChar.		  		Type ::= "char" ;
TString.		  	Type ::= "string" ;
TInt.				Type ::= "int" ;
TPointer.			Type ::= Pointer Type ;
Pointer1.           Pointer ::= "*" ;
Pointer2.           Pointer ::= Pointer "*" ;

-- STATEMENTS ///////////////////////////////////////
BlockStm.           Stm ::= Block ;
Call.               Stm ::= Id "(" [RExp] ")" ";"

separator RExp "," ;

Assignement.        Stm ::= LExp AssignOp RExp ";" ;
LExpStm.            Stm ::= LExp ";" ;
IfStm.              Stm ::= "if" "(" RExp ")" Block ;
IfElseStm.          Stm ::= "if" "(" RExp ")" Block "else" Block ;
WhileStm.           Stm ::= "while" "(" RExp ")" Block ;

Block.              Block ::= "{" [Def] [Stm] "}" ;

AssignEq.           AssignOp ::= "=" ;
AssignInc.          AssignOp ::= "+=" ;
AssignDec.          AssignOp ::= "-=" ;
AssignProd.         AssignOp ::= "*=" ;
AssignDiv.          AssignOp ::= "/=" ;
AssignBitXor.       AssignOp ::= "^=" ;
AssignBitAnd.       AssignOp ::= "&=" ;
AssignBitOr.        AssignOp ::= "|=" ;

-- LEXP //////////////////////////////////////////////
Id.                 LExp ::= Id ;
Array.              LExp ::= LExp "[" RExp "]" ;
Deference.          LExp ::= "*" LExp ;
Reference.          LExp ::= "&" Lexp ;
PreIncDec.          LExp ::= IncDecOp LExp ;
PostIncDec.         LExp ::= LExp IncDecOp ;

IncOp.              IncDecOp ::= "++" ;
DecOp.              IncDecOp ::= "--" ;

-- REXP //////////////////////////////////////////////
LExp.               RExp ::= LExp ;
Literal.            RExp ::= Literal ;
UnaryOp.            RExp ::= UnOp RExp ;
BinaryOp.           RExp ::= RExp BinOp RExp ;
Paren.              RExp ::= "(" RExp ")" ;

LiteralBool.        Literal ::= Boolean ;
LiteralChar.        Literal ::= Char ;
LiteralInt.         Literal ::= Integer ;
LiteralFloat.       Literal ::= Double ;
LiteralString.      Literal ::= String ;

BoolTrue.           Boolean ::= "true" ;
BoolFalse.          Boolean ::= "false" ;

UnOpNot.            UnOp ::= "!" ;
UnOpNeg.            UnOp ::= "-" ;

LogicalEq.          BinOp ::= "==" ;
LogicalNeq.         BinOp ::= "!=" ;
LogicalLt.          BinOp ::= "<" ;
LogicalLe.          BinOp ::= "<=" ;
LogicalGt.          BinOp ::= ">" ;
LogicalGe.          BinOp ::= ">=" ;
LogicalOr.          BinOp ::= "||" ;
LogicalAnd.         BinOp ::= "&&" ;
LogicalXor.         BinOp ::= "^" ;

ArithmSum.          BinOp ::= "+" ;
ArithmDiff.         BinOp ::= "-" ;
ArithmProd.         BinOp ::= "*" ;
ArithmDiv.          BinOp ::= "/" ;
ArithmMod.          BinOp ::= "%" ;

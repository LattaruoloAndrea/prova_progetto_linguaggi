entrypoints Program ;

comment "//" ;
comment "#" ;
comment "/*" "*/" ;

Prog.				Program ::= [Decl] ;

StmDecl.			Decl ::= Stm ;
FunDecl. 			Decl ::= Function ;

#Statement

ExpressStm.			Stm ::= RExp ";" ;

SingleVar.			Stm ::= Type Id ";" ;
MulVar.		  		Stm ::= Type Id "," [Id] ";" ;
separator Id "," ;
VarInit.	  		Stm ::= Type Id "=" RExp ";" ;

Const.			  	Stm ::= "const" Type Id "=" RExp ";" ;

Assign.			  	Stm ::= LExp "=" RExp ";" ;
Block.			  	Stm ::= "{" [Stm] "}" ;
IfThen.			  	Stm ::= "if" "(" RExp ")" "{" [Stm] "}" ;
IfThenElse.			Stm ::= "if" "(" RExp ")" "{" [Stm] "}" "else" "{" [Stm] "}" ;
Switch.			  	Stm ::= "switch" "(" RExp ")" "{" [Stm] "}" ;
While.			  	Stm ::= "while" "(" RExp ")" "{" [WhileStm] "}" ;
DoWhile.		  	Stm ::= "do" "{" [WhileStm]  "}" "while" "(" RExp ")" ";" ;
For.			    	Stm ::= "for" "(" LExp "=" RExp ";" RExp ";" Rexp ")" "{" [Stm] "}" ;
Return.			  	Stm ::= "return" Rexp ";" ;
ReturnOnly.			Stm ::= "return" ";" ;
separator Stm "" ;

FunCall.			  Stm ::= Id "(" [RExp] ")" ";" ;
WriteInt.       Stm ::= "writeInt" "(" [RExp] ")" ";" ;
WriteFloat.     Stm ::= "writeFloat" "(" [RExp] ")" ";" ;
WriteChar.      Stm ::= "writeChar" "(" [RExp] ")" ";" ;
WriteString.    Stm ::= "writeString" "(" [RExp] ")" ";" ;
separator RExp ","

Break.				    WhileStm ::= "break" ";" ;
Continue.			    WhileStm ::= "continue" ";" ;
WhileStatement.		WhileStm ::= Stm ;
separator WhileStm "" ;

FuncDef.			Function ::= Typefun Id "(" [Arg] ")" "{" [Stm] "}";
separator Arg ";" ;
terminator Stm "" ;
ArgDec.				Arg ::= Type Id ";";

#Espressioni

EOr.				  RExp  ::= RExp "||" RExp1 ;
EAnd.			  	RExp1 ::= RExp1 "&&" RExp2 ;
ENot.		  		RExp2 ::= "!" RExp3 ;
NEq.		  		RExp3 ::= RExp3 "==" RExp4 ;
ENEq.		  		RExp3 ::= RExp3 "!=" RExp4 ;
ELt.		  		RExp3 ::= RExp3 "<" RExp4 ;
EGt.		  		RExp3 ::= RExp3 ">" RExp4 ;
ELtEq.				RExp3 ::= RExp3 "<=" RExp4 ;
EGtEq.				RExp3 ::= RExp3 ">=" RExp4 ;
Eplus.				RExp4 ::= RExp4 "+" RExp5 ;
EMinus.				RExp4 ::= RExp4 "-" RExp5 ;
EDiv.			  	RExp5 ::= RExp5 "/" RExp6 ;
ETimes.				RExp5 ::= RExp5 "*" RExp6 ;
EMod.			  	RExp5 ::= RExp5 "%" RExp5 ;
EIncr.				RExp6 ::= "++" RExp7 ;
EDecr.				RExp6 ::= "--" RExp7 ;
EPIncr.				RExp7 ::= RExp8 "++" ;
EPDecr.				RExp7 ::= RExp8 "--" ;
EPar.			  	RExp8 ::= "(" RExp9 ")" ;
ELExp.				RExp9 ::= LExp ;
EArr.			  	RExp11 ::= "{" [RExp12] "}" ;
EFunCall.			RExp12 ::= Id "(" [RExp13] ")" ;
EReadInt.     Rexp13 ::= "readInt" "(" ")" ;
EReadFloat.   Rexp13 ::= "readFloat" "(" ")" ;
EReadChar.    Rexp13 ::= "readChar" "(" ")" ;
EReadString.  Rexp13 ::= "readString" "(" ")" ;
separator RExp "," ;
ERef.				  Rexp14 ::=  "TODO" ;
EFalse.				RExp15 ::= "false" ;
ETrue.				RExp15 ::= "true" ;
EInt.			  	RExp15 ::= Integer ;
EFloat.			RExp15 ::= Double ;

coercions RExp 14 ;

#LEexp

EVex. 				LExp ::= "TODO" ;
EElat.				LExp1 ::= "[" RExp "]" ;
EDeref.				LExp2 ::= Id ;

coercions Lexp 2 ;

#Tipi

TArray.				  Type ::= Type "[" "]" ;
TarrayLength.		Type ::= Type "[" RExp "]" ;
TBool.			  	Type ::= "bool" ;
TFloat.		     	Type ::= "float" ;
TChar.		  		Type ::= "char" ;
TString.		  	Type ::= "String" ;
TInt.				    Type ::= "int" ;
TPointer.			  Type ::= FunType "*" ;
TVoid.		  		FunType ::= "void" ;
TFunType.		  	FunType ::= Type ;

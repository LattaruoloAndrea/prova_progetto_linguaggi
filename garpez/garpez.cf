comment "//" ;
comment "/*" "*/" ;

entrypoints Program ;


-- PROGRAM /////////////////////////////////////////////////////////////////////////

Prog.						Program ::= [Declaration] ;
terminator Declaration "" ;


-- DECLARATIONS ////////////////////////////////////////////////////////////////////

ConstDecl.					Declaration ::= "const" [InitItem] ";" ;
VarDecl.					Declaration ::= Type [InitItem] ";" ;

InitDecl.					InitItem ::= Id "=" RExp ;
separator InitItem "," ;

FunDecl.					Declaration ::= RetType Id "(" [FormalParam] ")" Block ;

Param.						FormalParam ::= PassBy Type Id ;
ValuePass.					PassBy ::= "" ;
RefPass.					PassBy ::= "ref" ;

separator FormalParam "," ;


Blk.						Block ::= "{" [Declaration] [Statement] "}" ;

terminator Declaration "" ;
terminator Statement "" ;


-- STATEMENTS //////////////////////////////////////////////////////////////////////

BlkStm.						Statement ::= Block ;
CallStm.					Statement ::= Id "(" [RExp] ")" ";" ;
AssignStm.					Statement ::= LExp AssignmentOp RExp ";" ;
LExpStm.					Statement ::= LExp ";" ;
CondStm.					Statement ::= Conditional ;
LoopStm.					Statement ::= Loop ;
JmpStm.						Statement ::= Jump ";";


rules Conditional ::= If ;
rules Loop ::= While | DoWhile | For ;
rules Jump ::= Return | Return RExp | Break | Continue ;


-- CONDITIONALS ////////////////////////////////////////////////////////////////////

CondIf.						If ::= "if" "(" RExp ")" Block RestIf ;
rules 						RestIf ::= "" | "else" If | "else" Block ;


-- LOOPS ///////////////////////////////////////////////////////////////////////////

LoopWhile.					While ::= "while" "(" RExp ")" Block ;
LoopDoWhile.				DoWhile ::= "do" Block "while" "(" RExp ")" ";" ;
LoopFor.					For ::= "for" "(" Declaration ";" RExp ";" RExp ")" Block ;


-- TYPE ////////////////////////////////////////////////////////////////////////////

SType.						Type ::= SimpleType ;
AType.						Type ::= Type "[" PInt "]" ;
PType.						Type ::= Type "*" ;

SRType.						RetType ::= SimpleType ;
RRType.						RetType ::= "&" Type ;

rules SimpleType ::= "bool" | "char" | "int" | "float" | "string" | "void" ;


-- TOKENS //////////////////////////////////////////////////////////////////////////

position token Id ( letter (letter | digit | '_' )* ) ;
position token PBool {"true"} | {"false"} ;
position token PChar ( '\'' ((char - ["'\\"]) | ('\\' ["'\\nt"])) '\'' ) ;
position token PInt ( digit+ ) ;
position token PFloat ( digit+ '.' digit+ ) ;
position token PString ( '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ) ;

position token Return {"return"} ;
position token Break {"break"} ;
position token Continue {"continue"} ;